// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using ToolManager.Models;

namespace ToolManager.Data;

public partial class ToolManagerContext : DbContext
{
    public virtual DbSet<Holder> Holders { get; set; }

    public virtual DbSet<Insert> Inserts { get; set; }

    public virtual DbSet<Machine> Machines { get; set; }

    public virtual DbSet<MachineTool> MachineTools { get; set; }

    public virtual DbSet<Screw> Screws { get; set; }

    public virtual DbSet<Tool> Tools { get; set; }

    public virtual DbSet<ToolAssembly> ToolAssemblies { get; set; }
    public string DbPath { get; }
    public ToolManagerContext()
    {
        var folder = Environment.SpecialFolder.LocalApplicationData;
        var path = Environment.GetFolderPath(folder);
        DbPath = System.IO.Path.Join(path, "ToolMgr.db");
    }
    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        => optionsBuilder.UseSqlite($"Data Source={DbPath}");
    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Holder>(entity =>
        {
            entity.Property(e => e.HolderId).HasColumnName("HolderID");
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Manufacturer).IsRequired();
            entity.Property(e => e.PartNumber).IsRequired();
            entity.Property(e => e.Taper).IsRequired();
        });

        modelBuilder.Entity<Insert>(entity =>
        {
            entity.Property(e => e.Manufacturer).IsRequired();
            entity.Property(e => e.PartNumber).IsRequired();
            entity.Property(e => e.ToolId).IsRequired();

            entity.HasOne(d => d.Tool).WithMany(p => p.Inserts)
                .HasForeignKey(d => d.ToolId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Machine>(entity =>
        {
            entity.HasIndex(e => e.Name, "IX_Machines_Name").IsUnique();

            entity.Property(e => e.Name).IsRequired();
            entity.Property(e => e.Taper).IsRequired();
        });

        modelBuilder.Entity<MachineTool>(entity =>
        {
            entity.Property(e => e.MachineId).IsRequired();
            entity.Property(e => e.ToolAssemblyId).IsRequired();

            entity.HasOne(d => d.Machine).WithMany(p => p.MachineTools)
                .HasForeignKey(d => d.MachineId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.ToolAssembly).WithMany(p => p.MachineTools)
                .HasForeignKey(d => d.ToolAssemblyId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Screw>(entity =>
        {
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.ToolId).IsRequired();

            entity.HasOne(d => d.Tool).WithMany(p => p.Screws)
                .HasForeignKey(d => d.ToolId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        modelBuilder.Entity<Tool>(entity =>
        {
            entity.Property(e => e.Description).IsRequired();
            entity.Property(e => e.Manufacturer).IsRequired();
            entity.Property(e => e.PartNumber).IsRequired();
        });

        modelBuilder.Entity<ToolAssembly>(entity =>
        {
            entity.Property(e => e.HolderId).IsRequired();
            entity.Property(e => e.ToolId).IsRequired();

            entity.HasOne(d => d.Holder).WithMany(p => p.ToolAssemblies)
                .HasForeignKey(d => d.HolderId)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Tool).WithMany(p => p.ToolAssemblies)
                .HasForeignKey(d => d.ToolId)
                .OnDelete(DeleteBehavior.ClientSetNull);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}